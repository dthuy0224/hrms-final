<!DOCTYPE html>
<html>

      <%- include('../partials/header') %>

  <body>
    <nav class="navbar navbar-default no-margin">
    <!-- Brand and toggle get grouped for better mobile display -->

    <div class="navbar-header fixed-brand">
        <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" id="menu-toggle">
            <span class="glyphicon glyphicon-th-large" style="margin-left:5px;" aria-hidden="true"></span>
        </button>
        <a class="navbar-brand" href="#"> <%= userName %></a>
    </div><!-- navbar-header-->

    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
        <ul class="nav navbar-nav">
            <li class="active">
                <button class="navbar-toggle collapse in" data-toggle="collapse" id="menu-toggle-2"><span
                            class="glyphicon glyphicon-th-large" aria-hidden="true"></span></button>
            </li>
            <li class="navbar-brand">
                <form action="/logout" method="get">
                    <button id="logout" type="submit" style="margin-top: -3px;" class="btn btn-default"><i
                                class="fa fa-sign-out" aria-hidden="true"></i> Logout
                    </button>
                </form>
            </li>
        </ul>
    </div><!-- bs-example-navbar-collapse-1 -->
</nav>
<div id="wrapper">
    <!-- Sidebar -->
    <%- include('../partials/adminSidebar') %>

      <!-- Page Content -->
       <!-- Page Content -->
    <div id="page-content-wrapper">
      <div class="container-fluid xyz">
          <div class="row">
              <div class="col-lg-12">
                  <div class="page-header">
                      <ol class="breadcrumb">
                          <li><a href="/admin/view-all-employees">Employee</a></li>
                          <li class="active">Edit Employee</li>
                      </ol>
                      <h3>Edit Employee</h3>
                  </div>

<div id="menu1">
                      <form id="employee-form" class="form-horizontal" action="/admin/edit-employee/<%= employee._id %>" method="post" enctype="multipart/form-data">
                          
                          <!-- Personal Information Section -->
                          <div class="panel panel-default">
                              <div class="panel-heading">
                                  <h4 class="panel-title">Personal Information</h4>
                              </div>
                              <div class="panel-body">
                                  <!-- Form Legend - Required Fields -->
                                  <div class="form-legend">
                                      <span class="text-danger">* Indicates required field</span>
                                  </div>
                              
                                  <!-- Name Field -->
                                  <div class="form-group">
                                      <label class="col-sm-2 control-label">Name: <span class="text-danger">*</span></label>
                                      <div class="col-sm-5">
                                          <input type="text" class="form-control" placeholder="First name..." required name="firstName" maxlength="50" pattern="^[A-Za-zÀ-ỹ\s\-]+$" title="Alphabetical + Vietnamese chars only. No numbers or symbols except hyphens.">
                                          <span class="help-block error-message" style="display:none; color:#a94442;">First name is required!</span>
                                      </div>
                                      <div class="col-sm-5">
                                          <input type="text" class="form-control" placeholder="Last name..." required name="lastName" maxlength="50" pattern="^[A-Za-zÀ-ỹ\s\-]+$" title="Alphabetical + Vietnamese chars only. No numbers or symbols except hyphens.">
                                          <span class="help-block error-message" style="display:none; color:#a94442;">Last name is required!</span>
                                      </div>
                                  </div>
                                  
                                  <!-- Birth Name Field -->
                                  <div class="form-group">
                                      <label class="col-sm-2 control-label">Birth Name:</label>
                                      <div class="col-sm-10">
                                          <input type="text" class="form-control" placeholder="Full birth name..." name="birthName" maxlength="100" pattern="^[A-Za-zÀ-ỹ\s\-]+$" title="Alphabetical + Vietnamese chars only. No numbers or symbols except hyphens.">
                                      </div>
                                  </div>
                                  
                                  <!-- Date of Birth Field -->
                          <div class="form-group">
                                      <label class="col-sm-2 control-label">Date of Birth: <span class="text-danger">*</span></label>
                                      <div class="col-sm-4">
                                          <div class="row">
                                              <div class="col-xs-3">
                                                  <select name="dobDay" class="form-control" required>
                                                      <option value="">Day</option>
                                                      <% for(let i=1; i<=31; i++) { %>
                                                          <option value="<%= i %>"><%= i < 10 ? '0'+i : i %></option>
                                                      <% } %>
                                                  </select>
                                              </div>
                                              <div class="col-xs-4">
                                                  <select name="dobMonth" class="form-control" required>
                                                      <option value="">Month</option>
                                                      <% for(let i=1; i<=12; i++) { %>
                                                          <option value="<%= i %>"><%= i < 10 ? '0'+i : i %></option>
                                                      <% } %>
                                                  </select>
                                              </div>
                                              <div class="col-xs-5">
                                                  <select name="dobYear" class="form-control" required>
                                                      <option value="">Year</option>
                                                      <% for(let i=new Date().getFullYear()-60; i<=new Date().getFullYear()-18; i++) { %>
                                                          <option value="<%= i %>"><%= i %></option>
                                                      <% } %>
                                                  </select>
                                              </div>
                                          </div>
                                          <span class="help-block error-message" style="display:none; color:#a94442;">Date of birth is required!</span>
                                      </div>
                                      <label class="col-sm-2 control-label">Gender: <span class="text-danger">*</span></label>
                                      <div class="col-sm-4">
                                          <label class="radio-inline">
                                              <input type="radio" name="gender" value="male" checked> Male
                                          </label>
                                          <label class="radio-inline">
                                              <input type="radio" name="gender" value="female"> Female
                                          </label>
                                      </div>
                          </div>
                                  
                                  <!-- Personal Email Field -->
                          <div class="form-group">
                                      <label class="col-sm-2 control-label">Personal Email: <span class="text-danger">*</span></label>
                                      <div class="col-sm-10">
                                          <div class="input-group">
                                              <input type="email" class="form-control" placeholder="username@gmail.com" required name="email" pattern="[a-z0-9._%+\-]+@gmail\.com$" title="Please enter a valid Gmail address (username@gmail.com)">
                                              <span class="input-group-addon"><i class="fa fa-envelope"></i></span>
                                          </div>
                                          <span class="help-block error-message" style="display:none; color:#a94442;">Email address is required and must be a valid Gmail address!</span>
                              <% if(hasErrors){ %>
                              <% messages.forEach(function(item){
                                                  if(item === "Email is already in use"){ %>
                                                      <span class="help-block text-danger"><%= item %></span>
                              <% }
                              }) %>
                              <% } %>
                          </div>
                                  </div>
                                  
                                  <!-- Phone Number Field -->
                                  <div class="form-group">
                                      <label class="col-sm-2 control-label">Phone Number: <span class="text-danger">*</span></label>
                                      <div class="col-sm-5">
                                          <div class="input-group">
                                              <span class="input-group-addon">+84</span>
                                              <input type="text" class="form-control" placeholder="9 digits (without first 0)" required name="contactNumber" maxlength="9" pattern="^(3|5|7|8|9)\d{8}$" title="Enter 9 digits starting with 3, 5, 7, 8, or 9 (without the first 0)">
                                          </div>
                                          <span class="help-block error-message" style="display:none; color:#a94442;">Enter a valid Vietnamese phone number (9 digits without first 0)</span>
                                      </div>
                                  </div>
                                  <!-- Address Fields -->
                          <!-- Address Fields -->
                          <div class="form-group">
                            <label class="col-sm-2 control-label">Address: <span class="text-danger">*</span></label>
                            <div class="col-sm-3">
                                <select class="form-control" name="province" required>
                                    <option value="">City/Province...</option>
                                </select>
                                <span class="help-block error-message" style="display:none; color:#a94442;">Province is required!</span>
                            </div>
                            <div class="col-sm-3">
                                <select class="form-control" name="district" required disabled>
                                    <option value="">Select district...</option>
                                </select>
                                <span class="help-block error-message" style="display:none; color:#a94442;">District is required!</span>
                            </div>
                            <div class="col-sm-4">
                                <input type="text" class="form-control" placeholder="Detailed address..." name="detailedAddress" value="<%= employee.detailedAddress || '' %>" required minlength="10" title="Minimum 10 characters (Vietnamese format)">
                                <span class="help-block error-message" style="display:none; color:#a94442;">Detailed address is required!</span>
                            </div>
                        </div>
                                  
                                  <!-- Birthplace Field -->
                                  <div class="form-group">
                                      <label class="col-sm-2 control-label">Birthplace: <span class="text-danger">*</span></label>
                                      <div class="col-sm-5">
                                          <select class="form-control" name="birthplace" required>
                                              <option value="">City/Province...</option>
                                          </select>
                                          <span class="help-block error-message" style="display:none; color:#a94442;">Birthplace is required!</span>
                                      </div>
                          </div>
                                  
                                  <!-- ID Number Field -->
                          <div class="form-group">
                                      <label class="col-sm-2 control-label">ID Number (CCCD): <span class="text-danger">*</span></label>
                                      <div class="col-sm-5">
                                          <input type="text" class="form-control" placeholder="ID/CCCD number" name="idNumber" required maxlength="12" pattern="^\d{12}$" title="Must be exactly 12 digits">
                                          <span class="help-block error-message" style="display:none; color:#a94442;">ID number is required!</span>
                                      </div>
                                  </div>
                                  
                                  <!-- Photo Upload Field -->
                                  <div class="form-group">
                                    <label class="col-sm-2 control-label">Photo:</label>
                                    <div class="col-sm-10">
                                        <div class="row">
                                            <div class="col-sm-4">
                                                <div class="thumbnail" style="width: 150px; height: 150px; margin-bottom: 10px;">
                                                    <% if(employee.photo) { %>
                                                        <img src="/uploads/<%= employee.photo %>" alt="<%= employee.name %>" class="img-circle">
                                                    <% } else { %>
                                                        <img src="https://bootdey.com/img/Content/avatar/avatar7.png"  alt="Upload Photo" style="max-width: 100%; max-height: 100%;" class="img-circle">
                                                    <% } %>
                                                </div>
                                            </div>
                                            <script>
                                                // Khi chọn file: chỉ hiển thị tên file, KHÔNG đổi ảnh preview
                                                $('#photo').on('change', function () {
                                                    if (this.files && this.files[0]) {
                                                        $('#file-name-display').text(this.files[0].name);
                                                    } else {
                                                        $('#file-name-display').text('<%= employee.photo ? "Current photo" : "No file chosen" %>');
                                                    }
                                                });
                                            
                                                // Gửi form upload ảnh
                                                $('#upload-form').on('submit', function (e) {
                                                    e.preventDefault();
                                            
                                                    const formData = new FormData(this);
                                            
                                                    $.ajax({
                                                        url: '/upload-photo',
                                                        type: 'POST',
                                                        data: formData,
                                                        processData: false,
                                                        contentType: false,
                                                        success: function (response) {
                                                            // Sau khi upload thành công thì đổi preview ảnh
                                                            if (response.photoUrl) {
                                                                $('#preview-image').attr('src', response.photoUrl);
                                                                $('#file-name-display').text('Uploaded successfully');
                                                            }
                                                        },
                                                        error: function () {
                                                            alert('Upload failed.');
                                                        }
                                                    });
                                                });
                                            </script>
                                                                                        
                                            
                                            
                                            <div class="col-sm-8">
                                                <div class="custom-file-upload">
                                                    <input type="file" id="photo" name="photo" accept="image/*" style="position: absolute; left: -9999px;">
                                                    <button type="button" class="btn btn-primary" onclick="document.getElementById('photo').click();">
                                                        <i class="fa fa-upload"></i> Upload Photo
                                                    </button>
                                                    <span id="file-name-display" style="margin-left: 10px;">
                                                        <%= employee.photo ? 'Current photo' : 'No file chosen' %>
                                                    </span>
                                                </div>
                                                <p class="help-block">Upload a profile photo (optional)</p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                  <!-- Password Field (Hidden but required) -->
                                  <div class="form-group" style="display: none;">
                                      <label class="col-sm-2 control-label">Password:</label>
                                      <div class="col-sm-4">
                                          <input type="password" class="form-control" name="password" value="123456" minlength="6">
                                          <span class="help-block">Default password will be set and can be changed later</span>
                                      </div>
                                  </div>
                              </div>
                          </div>
                          
                          <!-- Job Information Section -->
                          <div class="panel panel-default">
                              <div class="panel-heading">
                                  <h4 class="panel-title">Job Information</h4>
                          </div>
                              <div class="panel-body">
                                  <!-- Job Title Field -->
                          <div class="form-group">
                                      <label class="col-sm-2 control-label">Job Title: <span class="text-danger">*</span></label>
                                      <div class="col-sm-4">
                                          <select class="form-control" name="designation" required title="Must select from predefined list">
                                              <option value="">Select job title...</option>
                                              <option value="Software Engineer">Software Engineer</option>
                                              <option value="System Analyst">System Analyst</option>
                                              <option value="Project Manager">Project Manager</option>
                                              <option value="Quality Assurance Engineer">Quality Assurance Engineer</option>
                                              <option value="UI/UX Designer">UI/UX Designer</option>
                                              <option value="Accounts Manager">Accounts Manager</option>
                                              <option value="HR Manager">HR Manager</option>
                                          </select>
                                          <span class="help-block error-message" style="display:none; color:#a94442;">Job title is required!</span>
                                      </div>
                                      <label class="col-sm-2 control-label">Department: <span class="text-danger">*</span></label>
                                      <div class="col-sm-4">
                                          <select class="form-control" name="department" required title="Must select from predefined list of departments">
                                              <option value="">Select department...</option>
                                  <option value="Software Development">Software Development</option>
                                  <option value="Quality Assurance">Quality Assurance</option>
                                  <option value="Human Resource">Human Resource</option>
                                              <option value="IT consulting">IT Consulting</option>
                                  <option value="Accounts">Accounts</option>
                                  <option value="Marketing">Marketing</option>
                                  <option value="Business Analysis">Business Analysis</option>
                              </select>
                                          <span class="help-block error-message" style="display:none; color:#a94442;">Department is required!</span>
                                      </div>
                                  </div>
                                  
                                  <!-- Job ID Field -->
                                  <div class="form-group">
                                      <label class="col-sm-2 control-label">Job ID:</label>
                                      <div class="col-sm-4">
                                          <input type="text" class="form-control" placeholder="Job ID" name="jobId">
                                      </div>
                          </div>
                                  
                                  <!-- Office Email Field -->
                                  <div class="form-group">
                                      <label class="col-sm-2 control-label">Office Email: <span class="text-danger">*</span></label>
                                      <div class="col-sm-4">
                                          <div class="input-group">
                                              <input type="email" class="form-control" placeholder="office.gmail@company.com" required name="officeEmail" pattern="[a-z0-9._%+\-]+@([a-z0-9\-]+\.)+[a-z]{2,}$" title="Please enter a valid company email address">
                                              <span class="input-group-addon"><i class="fa fa-envelope"></i></span>
                                          </div>
                                          <span class="help-block error-message" style="display:none; color:#a94442;">Office email is required and must be a valid company email!</span>
                                          <% if(hasErrors){ %>
                                          <% messages.forEach(function(item){
                                              if(item === "Office Email is already in use"){ %>
                                                  <span class="help-block text-danger"><%= item %></span>
                                          <% }
                                          }) %>
                                          <% } %>
                                      </div>
                          </div>
                                  
                                  <!-- Supervisor Field -->
                          <div class="form-group">
                                      <label class="col-sm-2 control-label">Supervisor:</label>
                                      <div class="col-sm-4">
                                          <input type="text" class="form-control" placeholder="Enter Supervisor Name" name="supervisor" title="Must reference existing employee">
                                      </div>
                                  </div>
                                  
                                  <!-- Employee Type Field -->
                                  <div class="form-group">
                                      <label class="col-sm-2 control-label">Employee Type: <span class="text-danger">*</span></label>
                                      <div class="col-sm-4">
                                          <select class="form-control" name="employeeType" required title="Must select either Full-Time or Part-Time">
                                              <option value="">Select type...</option>
                                              <option value="Full-Time">Full-Time</option>
                                              <option value="Part-Time">Part-Time</option>
                              </select>
                                          <span class="help-block error-message" style="display:none; color:#a94442;">Employee type is required!</span>
                                      </div>
                                      
                                  </div>
                                  
                                  <!-- Start Date Field -->
                                  <div class="form-group">
                                      <label class="col-sm-2 control-label">Start Date:</label>
                                      <div class="col-sm-4">
                                          <div class="row">
                                              <div class="col-xs-3">
                                                  <select name="startDay" class="form-control">
                                                      <option value="">Day</option>
                                                      <% for(let i=1; i<=31; i++) { %>
                                                          <option value="<%= i %>"><%= i < 10 ? '0'+i : i %></option>
                                                      <% } %>
                                                  </select>
                                          </div>
                                              <div class="col-xs-4">
                                                  <select name="startMonth" class="form-control">
                                                      <option value="">Month</option>
                                                      <% for(let i=1; i<=12; i++) { %>
                                                          <option value="<%= i %>"><%= i < 10 ? '0'+i : i %></option>
                                                      <% } %>
                                                  </select>
                                              </div>
                                              <div class="col-xs-5">
                                                  <select name="startYear" class="form-control">
                                                      <option value="">Year</option>
                                                      <% 
                                                      const currentYear = new Date().getFullYear();
                                                      for(let i=currentYear; i<=currentYear+5; i++) { %>
                                                          <option value="<%= i %>"><%= i %></option>
                                                      <% } %>
                                                  </select>
                                              </div>
                                          </div>
                                      </div>
                                  </div>
                                  
                                  <!-- Work Experience Field -->
                                  <div class="form-group">
                                      <label class="col-sm-2 control-label">Work Experience:</label>
                                      <div class="col-sm-6">
                                          <label class="radio-inline">
                                              <input type="radio" name="experience" value="Fresher" checked> Fresher
                                          </label>
                                          <label class="radio-inline">
                                              <input type="radio" name="experience" value="Junior"> Junior
                                          </label>
                                          <label class="radio-inline">
                                              <input type="radio" name="experience" value="Senior"> Senior
                                          </label>
                                      </div>
                                  </div>
                                  
                                  <!-- Skills Field -->
                                  <div class="form-group">
                                      <label class="col-sm-2 control-label">Skills:</label>
                                      <div class="col-sm-10">
                                          <div class="checkbox-scroll-container">
                                              <div class="checkbox-scroll">
                                                  <div class="checkbox">
                                                      <label><input type="checkbox" name="skills[]" value="N/A">N/A</label>
                                                  </div>
                                                  <div class="checkbox">
                                                      <label><input type="checkbox" name="skills[]" value="ROR">ROR</label>
                                                  </div>
                                                  <div class="checkbox">
                                                      <label><input type="checkbox" name="skills[]" value=".NET">.NET</label>
                                                  </div>
                                                  <div class="checkbox">
                                                      <label><input type="checkbox" name="skills[]" value="PHP">PHP</label>
                                                  </div>
                                                  <div class="checkbox">
                                                      <label><input type="checkbox" name="skills[]" value="Python Django">Python Django</label>
                                                  </div>
                                                  <div class="checkbox">
                                                      <label><input type="checkbox" name="skills[]" value="Mobile Development">Mobile Development</label>
                                                  </div>
                                                  <div class="checkbox">
                                                      <label><input type="checkbox" name="skills[]" value="Big Data Analytics">Big Data Analytics</label>
                                                  </div>
                                                  <div class="checkbox">
                                                      <label><input type="checkbox" name="skills[]" value="Firmware">Firmware</label>
                                                  </div>
                                                  <div class="checkbox">
                                                      <label><input type="checkbox" name="skills[]" value="Front End">Front End</label>
                                                  </div>
                                                  <div class="checkbox">
                                                      <label><input type="checkbox" name="skills[]" value="UI/UX Design">UI/UX Design</label>
                                                  </div>
                                              </div>
                                          </div>
                                      </div>
                                  </div>
                              </div>
                          </div>
                          
                          <!-- Form Buttons -->
                          <div class="form-group">
                              <div class="col-sm-offset-2 col-sm-10">
                                  <button type="button" onclick="window.location.href='/admin/view-all-employees'" class="btn btn-default"style="width: 100px; height:45px; margin-right: 15px;" >Cancel</button>
                                  <button type="submit" class="btn btn-primary btn-lg" id="saveButton" style="width: 100px;" disabled>Save</button>
                                </div>
                          </div>
                      </form>
                  </div>
              </div>
          </div>
      </div>
  </div>
  <!-- /#page-content-wrapper -->
      <!-- /#page-content-wrapper -->

    </div>
    <!-- /#wrapper -->
    <!-- jQuery -->
<style>
    .file-input {
        display: none;
    }
    .thumbnail {
        border: 1px solid #ddd;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #f5f5f5;
    }
    .breadcrumb {
        background-color: transparent;
        padding-left: 0;
    }
    .panel-title {
        font-weight: bold;
    }
    .form-group {
        margin-bottom: 15px;
    }
    .panel {
        margin-bottom: 20px;
    }
    .help-block {
        margin-top: 5px;
        margin-bottom: 0;
    }
    .text-danger {
        color: #a94442;
    }
    .api-error {
        color: #a94442;
        background-color: #f2dede;
        border-color: #ebccd1;
    }
    .error-input {
        border-color: #a94442;
        -webkit-box-shadow: inset 0 1px 1px rgba(0,0,0,.075);
        box-shadow: inset 0 1px 1px rgba(0,0,0,.075);
        background-color: #fff8f8;
    }
    .error-message {
        color: #a94442;
        margin-top: 5px;
        display: none;
        font-size: 12px;
        font-weight: bold;
        animation: fadeIn 0.3s;
    }
    @keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }
    .required-field {
        color: #a94442;
        margin-left: 3px;
    }
    /* Add style for form legend */
    .form-legend {
        margin-bottom: 20px;
        padding-bottom: 10px;
        border-bottom: 1px solid #eee;
    }
    .form-legend .text-danger {
        font-size: 14px;
        font-weight: normal;
        margin-left: 10px;
    }
    /* Custom file upload styles */
    .custom-file-upload {
        display: inline-block;
        margin-bottom: 10px;
    }
    #file-name-display {
        display: inline-block;
        vertical-align: middle;
        color: #555;
        font-style: italic;
    }
    /* Checkbox scroll container styles */
    .checkbox-scroll-container {
        border: 1px solid #ccc;
        border-radius: 4px;
        background-color: #fff;
    }
    .checkbox-scroll {
        max-height: 150px;
        overflow-y: auto;
        padding: 10px;
    }
    .checkbox-scroll .checkbox {
        margin-top: 2px;
        margin-bottom: 2px;
    }
    .checkbox-scroll .checkbox label {
        font-weight: normal;
    }
</style>

</body>
  <!-- jQuery -->
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.0/jquery.js" charset="UTF-8"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.js" charset="UTF-8"></script>
  <script src="/javascripts/bootstrap-select.min.js"></script>
  <script src="/javascripts/sidebar_menu.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet"/>
  <script src="/javascripts/provinces.js"></script>
  
  <script>
      $(document).ready(function () {
          // Hiển thị thông báo flash message
          <% if (messages && messages.success) { %>
              showAlert('<%= messages.success %>', 'success');
          <% } else if (messages && messages.error) { %>
              showAlert('<%= messages.error %>', 'danger');
          <% } %>
          
          // Hàm hiển thị thông báo
          function showAlert(message, type) {
              var alertHtml = '<div class="alert alert-' + type + ' alert-dismissible" role="alert">';
              alertHtml += '<button type="button" class="close" data-dismiss="alert" aria-label="Close">';
              alertHtml += '<span aria-hidden="true">&times;</span></button>';
              alertHtml += message + '</div>';
              $('.page-header').after(alertHtml);
              
              // Tự động ẩn sau 5 giây
              setTimeout(function() {
                  $('.alert').fadeOut('slow', function() {
                      $(this).remove();
                  });
              }, 5000);
          }
          
          // Khởi tạo giá trị cho form khi mở modal
          $('#editProfileModal').on('show.bs.modal', function () {
              // Thiết lập các giá trị cơ bản
              setFormValue('editGender', '<%= employee.gender || "" %>');
              setFormValue('editBirthplace', '<%= employee.birthplace || "" %>');
              setFormValue('editProvince', '<%= employee.province || "" %>');
              setFormValue('editDistrict', '<%= employee.district || "" %>');
              setFormValue('editDetailedAddress', '<%= employee.detailedAddress || "" %>');
              setFormValue('editIdNumber', '<%= employee.idNumber || "" %>');
              setFormValue('editJobId', '<%= employee.jobId || "" %>');
              setFormValue('editContactNumber', '<%= employee.contactNumber || "" %>');
              setFormValue('editDepartment', '<%= employee.department || "" %>');
              setFormValue('editExperience', '<%= employee.experience || "Senior" %>');
              
              <% if (employee.startDate) { %>
              setFormValue('editStartDate', '<%= moment(employee.startDate).format("YYYY-MM-DD") %>');
              <% } %>
              
              // Thiết lập giá trị loại hình làm việc
              <% if (employee.employeeType) { %>
              setFormValue('editEmployeeType', '<%= employee.employeeType %>');
              <% } else if (employee.employmentType) { %>
              setFormValue('editEmployeeType', '<%= employee.employmentType === "full-time" ? "Full-Time" : "Part-Time" %>');
              <% } %>
              
          // Remove duplicate province loading code and use provinces.js instead
          // Wait for provinces.js to load data and then set selected values
          
          // Function to set selected values after provinces.js loads data
          function setAddressSelects() {
              const employeeProvinceCode = '<%= employee.provinceCode || "" %>';
              const employeeDistrictCode = '<%= employee.districtCode || "" %>';
              const employeeBirthplaceCode = '<%= employee.birthplaceCode || "" %>';
              
              if (employeeProvinceCode) {
                  $('select[name="province"]').val(employeeProvinceCode).trigger('change');
              }
              
              // Use event callback to set district and birthplace after province change
              $('select[name="province"]').one('change', function() {
                  if (employeeDistrictCode) {
                      $('select[name="district"]').val(employeeDistrictCode);
                  }
                  if (employeeBirthplaceCode) {
                      $('select[name="birthplace"]').val(employeeBirthplaceCode);
                  }
              });
          }
          
          // Call provinces.js function to load provinces and birthplaces
          if (typeof loadProvincesDataImmediately === 'function') {
              loadProvincesDataImmediately();
          }
          
          // Initialize province change event handler from provinces.js
          if (typeof initProvinceChange === 'function') {
              initProvinceChange();
          }
          
          // Set selected values after provinces.js loads data
          setAddressSelects();
      });
      
          // Remove redundant helper functions
          function setFormValue(id, value) {
              var element = document.getElementById(id);
              if (!element) return;
              if (element.tagName === 'SELECT' || element.tagName === 'INPUT') {
                  element.value = value;
              } else {
                  element.textContent = value;
              }
          }
  </script>
  
  
<script>
$(document).ready(function() {
  // Function to populate all employee data into the form
  function populateEmployeeForm(employee) {
      if (!employee) return;

      // Personal Information
      $('input[name="firstName"]').val(employee.name?.split(' ')[0] || '');
      $('input[name="lastName"]').val(employee.name?.split(' ').slice(1).join(' ') || '');
      $('input[name="birthName"]').val(employee.birthName || '');
      
      // Date of Birth - handle both Date object and ISO string
      if (employee.dateOfBirth) {
          const dob = employee.dateOfBirth instanceof Date ? 
                    employee.dateOfBirth : 
                    new Date(employee.dateOfBirth);
          $('select[name="dobDay"]').val(dob.getDate());
          $('select[name="dobMonth"]').val(dob.getMonth() + 1);
          $('select[name="dobYear"]').val(dob.getFullYear());
      }
      
      // Gender
      $(`input[name="gender"][value="${employee.gender || 'male'}"]`).prop('checked', true);
      
      // Contact Information
      $('input[name="email"]').val(employee.email || '');
      $('input[name="contactNumber"]').val(employee.contactNumber?.replace(/^\+84/, '') || '');
      
      // Address Information
      if (employee.province) {
          $('select[name="province"]').val(employee.province);
          $('select[name="district"]').val(employee.district || '');
          $('select[name="birthplace"]').val(employee.birthplace || '');
      }
      $('input[name="detailedAddress"]').val(employee.detailedAddress || '');
      
      // Identification
      $('input[name="idNumber"]').val(employee.idNumber || '');
      
      // Photo Preview
      if (employee.photo) {
          $('#preview-image').attr('src', employee.photo);
          $('#file-name-display').text('Current photo');
      }
      
      // Job Information
      $('select[name="designation"]').val(employee.designation || '');
      $('select[name="department"]').val(employee.department || '');
      $('input[name="jobId"]').val(employee.jobId || '');
      $('input[name="officeEmail"]').val(employee.officeEmail || '');
      $('input[name="supervisor"]').val(employee.supervisor || '');
      
      // Handle both employeeType and employmentType fields
      const employeeType = employee.employeeType || 
                         (employee.employmentType === 'full-time' ? 'Full-Time' : 'Part-Time');
      $('select[name="employeeType"]').val(employeeType || 'Full-Time');
      
      // Start Date
      if (employee.startDate) {
          const startDate = employee.startDate instanceof Date ? 
                           employee.startDate : 
                           new Date(employee.startDate);
          $('select[name="startDay"]').val(startDate.getDate());
          $('select[name="startMonth"]').val(startDate.getMonth() + 1);
          $('select[name="startYear"]').val(startDate.getFullYear());
      }
      
      // Experience Level
      $(`input[name="experience"][value="${employee.experience || 'Fresher'}"]`).prop('checked', true);
      
      // Skills - handle both Skills (capital S) and skills arrays
      const skills = employee.Skills || employee.skills || [];
      skills.forEach(skill => {
          $(`input[name="skills[]"][value="${skill}"]`).prop('checked', true);
      });
      
      // Trigger validation to clear any errors
      $('input, select').trigger('blur');
  }

// Load employee data when page is ready
const employeeData = <%- JSON.stringify(employee || {}) %>;
populateEmployeeForm(employeeData);

  // Load address data using API
  function loadAddressData() {
      // First pre-fill existing values directly
      if (employeeData.province) {
          // Create temporary options with the employee data
          $('select[name="province"]').html(`<option value="${employeeData.province}" selected>${employeeData.province}</option>`);
          $('select[name="district"]').html(`<option value="${employeeData.district || ''}" selected>${employeeData.district || ''}</option>`);
          $('select[name="birthplace"]').html(`<option value="${employeeData.birthplace || ''}" selected>${employeeData.birthplace || ''}</option>`);
      }

      // Then load API data for editing
      if (window.provincesData) {
          populateProvinces(window.provincesData);
          return;
      }

      $.ajax({
          url: 'https://provinces.open-api.vn/api/?depth=2',
          type: 'GET',
          dataType: 'json',
          success: function(data) {
              window.provincesData = data;
              populateProvinces(data);
              
              // Re-apply employee data after API loads
              if (employeeData.province) {
                  const provinceOption = $('select[name="province"]').find(`option[data-name="${employeeData.province}"]`);
                  if (provinceOption.length) {
                      $('select[name="province"]').val(provinceOption.val()).trigger('change');
                      
                      // Wait for districts to load
                      setTimeout(() => {
                          if (employeeData.district) {
                              $('select[name="district"]').val(employeeData.district);
                          }
                          if (employeeData.birthplace) {
                              $('select[name="birthplace"]').val(employeeData.birthplace);
                          }
                      }, 500);
                  }
              }
          },
          error: function() {
              console.error('Error loading address data');
              // Fallback to simple select if API fails
              $('select[name="province"]').removeAttr('disabled');
              $('select[name="district"]').removeAttr('disabled');
              $('select[name="birthplace"]').removeAttr('disabled');
          }
      });
  }

  // Remove duplicate address loading and population code
  // Use provinces.js functions instead
// Image preview
$("#photo").change(function() {
if (this.files && this.files[0]) {
  var reader = new FileReader();
  reader.onload = function(e) {
      $('#preview-image').attr('src', e.target.result);
  }
  reader.readAsDataURL(this.files[0]);
  $('#file-name-display').text(this.files[0].name);
} else {
  // Reset về ảnh hiện tại nếu có
  $('#preview-image').attr('src', '<%= employee.photo || "https://via.placeholder.com/150" %>');
  $('#file-name-display').text('<%= employee.photo ? "Current photo" : "No file chosen" %>');
}
});

// Hiển thị ảnh hiện tại khi trang load
$(document).ready(function() {
<% if (employee.photo) { %>
  $('#file-name-display').text('Current photo');
<% } %>
});
  // Initial load of address data
  loadAddressData();
});
</script>
  <style>
      /* Styles for profile page */
      .profile-container {
          margin-top: 20px;
      }
      .profile-card {
          border: 1px solid #ddd;
          border-radius: 5px;
          overflow: hidden;
          margin-bottom: 20px;
          box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      }
      .profile-header {
          height: 80px;
          position: relative;
      }
      .employment-badge {
          position: absolute;
          top: 10px;
          right: 10px;
          background-color: rgba(255,255,255,0.8);
          color: #333;
          padding: 5px 10px;
          border-radius: 3px;
          font-size: 12px;
          font-weight: bold;
      }
      .profile-body {
          padding: 20px;
          background-color: #f9f9f9;
      }
      .profile-image {
          position: relative;
          z-index: 2;
          text-align: center;
          margin-bottom: 15px;
      }
      .profile-image img {
          width: 120px;
          height: 120px;
          border: 5px solid white;
          box-shadow: 0 2px 5px rgba(0,0,0,0.1);
          margin-top: -60px;
          display: inline-block;
      }
      
      /* Additional styles to move content up */
      #page-content-wrapper {
          padding-top: 10px;
      }
      .page-header {
          margin-top: 10px;
          margin-bottom: 15px;
      }
      .panel {
          margin-bottom: 15px;
          box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      }
      .panel-heading {
          padding: 10px 15px;
      }
      .panel-body {
          padding: 15px;
      }
      .info-box {
          margin-bottom: 15px;
      }
      
      /* Profile Styles */
      .profile-container {
          margin-top: 20px;
      }
      
      /* Profile Card Styles */
      .profile-card {
          background-color: #fff;
          border-radius: 10px;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
          margin-bottom: 20px;
          overflow: hidden;
      }
      
      .profile-header {
          background-color: #3498db;
          height: 100px;
          position: relative;
      }
      
      .profile-image {
          margin-top: 20px;
          margin-bottom: 20px;
      }
      
      .profile-image img {
          width: 120px;
          height: 120px;
          border-radius: 50%;
          border: 4px solid white;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      }
      
      .profile-name {
          margin-bottom: 5px;
          font-weight: bold;
      }
      
      .profile-id {
          color: #777;
          margin-bottom: 20px;
      }
      
      .profile-details {
          text-align: left;
      }
      
      .profile-details p {
          margin-bottom: 10px;
      }
      
      .profile-details i {
          width: 20px;
          margin-right: 10px;
          color: #42a5f5;
      }
      
      /* Info Boxes */
      .info-box {
          display: flex;
          align-items: center;
          background-color: #e3f2fd;
          border-radius: 10px;
          padding: 15px;
          margin-bottom: 20px;
          min-height: 100px;
      }
      
      .info-box-icon {
          font-size: 24px;
          margin-right: 15px;
          width: 50px;
          height: 50px;
          background-color: #42a5f5;
          color: white;
          border-radius: 50%;
          display: flex;
          align-items: center;
          justify-content: center;
      }
      
      .info-box-content h4 {
          margin-top: 0;
          font-size: 16px;
          color: #333;
      }
      
      .info-box-content p {
          margin-bottom: 0;
          font-size: 18px;
          font-weight: bold;
      }
      
      /* Panel styles */
      .panel-info {
          border-color: #3498db;
      }
      
      .panel-info > .panel-heading {
          background-color: #42a5f5;
          color: white;
          border-color: #42a5f5;
          position: relative;
      }
      
      .panel-heading .btn-edit {
          position: absolute;
          right: 10px;
          top: 7px;
          padding: 3px 8px;
          font-size: 12px;
      }
      
      .row.mb-3 {
          margin-bottom: 15px;
      }
      
      .row.mb-4 {
          margin-bottom: 20px;
      }
      
      /* Badge styles */
      .badge-info {
          background-color: #42a5f5;
          color: white;
          margin-right: 5px;
          padding: 5px 10px;
          border-radius: 3px;
          display: inline-block;
          margin-bottom: 5px;
      }
      
      /* Breadcrumb styles */
      .breadcrumb {
          background-color: transparent;
          padding-left: 0;
      }
      
      /* Page header */
      .page-header {
          margin-bottom: 20px;
      }
      
      /* Panel heading style */
      .panel-heading {
          padding: 12px 15px;
      }
      
      .panel-title {
          font-size: 16px;
          font-weight: 600;
      }
  </style>
<script>
document.addEventListener('DOMContentLoaded', function () {
const path = window.location.pathname;
const menuLinks = document.querySelectorAll('#menu li a');

menuLinks.forEach(link => {
const li = link.parentElement;
if (link.getAttribute('href') === path) {
  li.classList.add('active');
} else {
  li.classList.remove('active');
}
});
});
</script>


    
<!-- Flash Messages -->
    <script>
    $(document).ready(function() {
    // Enhanced Toastr configuration
    toastr.options = {
    "closeButton": true,
    "debug": false,
    "newestOnTop": true,
    "progressBar": true,
    "positionClass": "toast-top-center", // Changed from toast-top-right for better visibility
    "preventDuplicates": false,
    "onclick": null,
    "showDuration": "9000", // Increased from 300
    "hideDuration": "1000",
    "timeOut": "9000", // Increased from 5000 to give more time to read
    "extendedTimeOut": "2000", // Increased from 1000
    "showEasing": "swing",
    "hideEasing": "linear",
    "showMethod": "fadeIn",
    "hideMethod": "fadeOut",
    "tapToDismiss": false // Require clicking the X to dismiss
    };
    
    <%# Check if messages exist and display them %>
    <% if (typeof messages !== 'undefined') { %>
    <% if (messages.success && messages.success.length > 0) { %>
      toastr.success("<%= messages.success[0] %>", "Success!", {
          "iconClass": 'toast-success animated bounceIn'
      });
    <% } %>
    
    <% if (messages.error && messages.error.length > 0) { %>
      toastr.error("<%= messages.error[0] %>", "Error!", {
          "iconClass": 'toast-error animated shake'
      });
    <% } %>
    <% } %>
    });
    </script>
    
    <!-- Add CSS for animations -->
    <style>
    @keyframes bounceIn {
    from, 20%, 40%, 60%, 80%, to {
    animation-timing-function: cubic-bezier(0.215, 0.610, 0.355, 1.000);
    }
    0% {
    opacity: 0;
    transform: scale3d(0.3, 0.3, 0.3);
    }
    20% {
    transform: scale3d(1.1, 1.1, 1.1);
    }
    40% {
    transform: scale3d(0.9, 0.9, 0.9);
    }
    60% {
    opacity: 1;
    transform: scale3d(1.03, 1.03, 1.03);
    }
    80% {
    transform: scale3d(0.97, 0.97, 0.97);
    }
    to {
    opacity: 1;
    transform: scale3d(1, 1, 1);
    }
    }
    .bounceIn {
    animation-duration: 0.75s;
    animation-name: bounceIn;
    }
    @keyframes shake {
    from, to {
    transform: translate3d(0, 0, 0);
    }
    10%, 30%, 50%, 70%, 90% {
    transform: translate3d(-10px, 0, 0);
    }
    20%, 40%, 60%, 80% {
    transform: translate3d(10px, 0, 0);
    }
    }
    .shake {
    animation-name: shake;
    animation-duration: 0.8s;
    }
    .animated {
    animation-fill-mode: both;
    }
    /* Custom toast styling */
    .toast-success, .toast-error {
    font-size: 16px;
    font-weight: bold;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.2);
    }
    .toast-success {
    background-color: #51A351;
    }
    .toast-error {
    background-color: #BD362F;
    }
    </style>
    
    <!-- CSRF Token Refresh Script -->
    <script>
    // CSRF Token Refresh
    $(document).ready(function() {
    $.ajaxSetup({
      headers: {
          'X-CSRF-Token': '<%= csrfToken %>'
      }
    });
    
    // Đặt token vào form chính
    var csrfToken = '<%= csrfToken %>';
    $('input[name="_csrf"]').val(csrfToken);
    
    // Kiểm tra và làm mới token mỗi 10 phút
    setInterval(function() {
      $.get('/refresh-csrf', function(data) {
          $('input[name="_csrf"]').val(data.csrfToken);
      });
    }, 10 * 60 * 1000); // 10 phút
    
    // Image preview
    $("#photo").change(function() {
      if (this.files && this.files[0]) {
          var reader = new FileReader();
          reader.onload = function(e) {
              $('#preview-image').attr('src', e.target.result);
          }
          reader.readAsDataURL(this.files[0]);
          
          // Hiển thị tên file đã chọn
          $('#file-name-display').text(this.files[0].name);
      } else {
          // Reset về giá trị mặc định nếu không có file nào được chọn
          $('#preview-image').attr('src', 'https://via.placeholder.com/150');
          $('#file-name-display').text('No file chosen');
      }
    });
    
    // Auto-scroll to form validation errors if any
    if ($('.text-danger').length > 0) {
      $('html, body').animate({
          scrollTop: $('.text-danger').first().offset().top - 100
      }, 200);
    }
    
    // Real-time validation for required fields
    $('input[required], select[required]').on('blur', function() {
      if (!this.value.trim()) {
          $(this).addClass('error-input');
          $(this).closest('.form-group').find('.error-message').show();
      } else {
          $(this).removeClass('error-input');
          $(this).closest('.form-group').find('.error-message').hide();
      }
    });
    
    // Show validation message on required select fields
    $('select[required]').on('change', function() {
      if (!this.value) {
          $(this).addClass('error-input');
          $(this).closest('.form-group').find('.error-message').show();
      } else {
          $(this).removeClass('error-input');
          $(this).closest('.form-group').find('.error-message').hide();
      }
    });
    
    // Validate form fields before submit
    $('#employee-form').on('submit', function(e) {
      let hasErrors = false;
      
      // Check all required fields
      $(this).find('input[required], select[required]').each(function() {
          if (!this.value.trim()) {
              $(this).addClass('error-input');
              $(this).closest('.form-group').find('.error-message').show();
              hasErrors = true;
          }
      });
      
      // Email validation for Gmail
      const personalEmail = $('input[name="email"]').val().trim();
      const gmailRegex = /^[a-z0-9](\.?[a-z0-9]){5,}@gmail\.com$/i;
      if (personalEmail && !gmailRegex.test(personalEmail)) {
          $('input[name="email"]').addClass('error-input');
          $('input[name="email"]').closest('.form-group').find('.error-message').text('Please enter a valid Gmail address (example: username@gmail.com)').show();
          hasErrors = true;
      }
      
      // Email validation for company email
      const officeEmail = $('input[name="officeEmail"]').val().trim();
      const emailRegex = /^[a-z0-9](\.?[a-z0-9_-]){2,}@([a-z0-9-]+\.)+[a-z]{2,6}$/i;
      if (officeEmail && !emailRegex.test(officeEmail)) {
          $('input[name="officeEmail"]').addClass('error-input');
          $('input[name="officeEmail"]').closest('.form-group').find('.error-message').text('Please enter a valid company email address').show();
          hasErrors = true;
      }
      
      // Phone number validation
      const phoneNumber = $('input[name="contactNumber"]').val().trim();
      const phoneRegex = /^(3|5|7|8|9)\d{8}$/;
      if (phoneNumber && !phoneRegex.test(phoneNumber)) {
          $('input[name="contactNumber"]').addClass('error-input');
          if (phoneNumber.length !== 9) {
              $('input[name="contactNumber"]').closest('.form-group').find('.error-message').text('Phone number must be exactly 9 digits').show();
          } else {
              $('input[name="contactNumber"]').closest('.form-group').find('.error-message').text('Invalid format. Must start with 3, 5, 7, 8, or 9').show();
          }
          hasErrors = true;
      }
      
      if (hasErrors) {
          e.preventDefault();
          // Scroll to first error
          $('html, body').animate({
              scrollTop: $('.error-input').first().offset().top - 100
          }, 200);
          return false;
      }
      
      // Show success popup immediately on submit
      toastr.success('Employee information saved successfully!', 'Success');
      
      // Trim khoảng trắng đầu/cuối cho email
      var emailInput = $('input[name="email"]');
      emailInput.val($.trim(emailInput.val()));
      
      // Xử lý viết hoa chữ cái đầu cho first name, last name và birth name
      var firstNameInput = $('input[name="firstName"]');
      var lastNameInput = $('input[name="lastName"]');
      var birthNameInput = $('input[name="birthName"]');
      
      // Hàm format viết hoa chữ cái đầu và các chữ sau dấu cách
      function toTitleCase(str) {
          if (!str) return str;
          str = $.trim(str); // Trim khoảng trắng
          return str.split(' ').map(function(word) {
              if (word.length > 0) {
                  return word[0].toUpperCase() + word.substring(1).toLowerCase();
              }
              return '';
          }).join(' ');
      }
      
      // Áp dụng định dạng viết hoa chữ cái đầu
      firstNameInput.val(toTitleCase(firstNameInput.val()));
      lastNameInput.val(toTitleCase(lastNameInput.val()));
      
      // Chỉ xử lý birth name nếu có giá trị
      if (birthNameInput.val()) {
          birthNameInput.val(toTitleCase(birthNameInput.val()));
      }
      
      return true; // cho phép form submit
    });
    
    // Apply error validation on page load for required fields that are empty
    setTimeout(function() {
      $('form input[required]:visible, form select[required]:visible').filter(function() {
          return !this.value.trim();
      }).each(function() {
          $(this).addClass('error-input');
      });
    }, 500);
    
    // Custom Gmail validation
    $('input[name="email"]').on('input blur', function() {
      const value = $(this).val().trim();
      const gmailRegex = /^[a-z0-9](\.?[a-z0-9]){5,}@gmail\.com$/i;
      
      if (value && !gmailRegex.test(value)) {
          $(this).addClass('error-input');
          // Update error message text
          const errorMsg = $(this).closest('.form-group').find('.error-message');
          errorMsg.text('Please enter a valid Gmail address (example: username@gmail.com)');
          errorMsg.show();
      } else if (!value) {
          $(this).addClass('error-input');
          $(this).closest('.form-group').find('.error-message').text('Email address is required!').show();
      } else {
          $(this).removeClass('error-input');
          $(this).closest('.form-group').find('.error-message').hide();
      }
    });
    
    // Custom company email validation
    $('input[name="officeEmail"]').on('input blur', function() {
      const value = $(this).val().trim();
      const emailRegex = /^[a-z0-9](\.?[a-z0-9_-]){2,}@([a-z0-9-]+\.)+[a-z]{2,6}$/i;
      
      if (value && !emailRegex.test(value)) {
          $(this).addClass('error-input');
          // Update error message text
          const errorMsg = $(this).closest('.form-group').find('.error-message');
          errorMsg.text('Please enter a valid company email address');
          errorMsg.show();
      } else if (!value) {
          $(this).addClass('error-input');
          $(this).closest('.form-group').find('.error-message').text('Office email is required!').show();
      } else {
          $(this).removeClass('error-input');
          $(this).closest('.form-group').find('.error-message').hide();
      }
    });
    
    // Vietnamese phone number validation
    $('input[name="contactNumber"]').on('input blur', function() {
      const value = $(this).val().trim();
      // The pattern validates the first digit must be 3,5,7,8,9 followed by 8 digits
      const phoneRegex = /^(3|5|7|8|9)\d{8}$/;
      
      if (value && value.length !== 9) {
          $(this).addClass('error-input');
          $(this).closest('.form-group').find('.error-message').text('Phone number must be exactly 9 digits').show();
      } else if (value && !phoneRegex.test(value)) {
          $(this).addClass('error-input');
          $(this).closest('.form-group').find('.error-message').text('Invalid format. Must start with 3, 5, 7, 8, or 9').show();
      } else if (!value) {
          $(this).addClass('error-input');
          $(this).closest('.form-group').find('.error-message').text('Phone number is required!').show();
      } else {
          $(this).removeClass('error-input');
          $(this).closest('.form-group').find('.error-message').hide();
      }
    });
    
    // Ghi chú về việc tải dữ liệu tỉnh thành - không cần gọi tại đây nữa
    console.log("jQuery ready, waiting for provinces.js to load data");
    // Hàm loadProvincesDataImmediately đã được gọi tự động từ provinces.js
    
    // Function to find province by code and load fresh data
    async function loadProvinceByCode(provinceName) {
      if (!window.provincesData) return null;
      
      const province = window.provincesData.find(function(p) { 
          return p.name === provinceName; 
      });
      if (!province || !province.code) return null;
      
      try {
          const response = await fetch('https://provinces.open-api.vn/api/p/' + province.code + '?depth=2');
          if (!response.ok) throw new Error('API request failed');
          return await response.json();
      } catch (error) {
          console.error('Error loading province data:', error);
          return null;
      }
    }
    
    // Xử lý submit form để chuyển 3 dropdown date thành 1 ngày ISO
    $('#employee-form').on('submit', function(e) {
      // Xử lý Date of Birth
      const dobDay = $('select[name="dobDay"]').val();
      const dobMonth = $('select[name="dobMonth"]').val();
      const dobYear = $('select[name="dobYear"]').val();
      
      if (dobDay && dobMonth && dobYear) {
          // Format tháng và ngày để đảm bảo có 2 chữ số
          const formattedDay = dobDay.toString().padStart(2, '0');
          const formattedMonth = dobMonth.toString().padStart(2, '0');
          
          // Tạo ngày ISO (yyyy-mm-dd)
          const isoDate = `${dobYear}-${formattedMonth}-${formattedDay}`;
          
          // Tạo input ẩn chứa giá trị ISO
          $('<input>').attr({
              type: 'hidden',
              name: 'dateOfBirth',
              value: isoDate
          }).appendTo(this);
      } else if(dobDay || dobMonth || dobYear) {
          // Nếu chỉ nhập một phần của ngày, hiển thị lỗi
          e.preventDefault();
          alert('Vui lòng nhập đầy đủ ngày, tháng, năm cho ngày sinh');
          return false;
      }
      
      // Xử lý Start Date (nếu có)
      const startDay = $('select[name="startDay"]').val();
      const startMonth = $('select[name="startMonth"]').val();
      const startYear = $('select[name="startYear"]').val();
      
      // Chỉ xử lý nếu cả 3 giá trị đều có hoặc đều không có
      if (startDay && startMonth && startYear) {
          // Format tháng và ngày để đảm bảo có 2 chữ số
          const formattedStartDay = startDay.toString().padStart(2, '0');
          const formattedStartMonth = startMonth.toString().padStart(2, '0');
          
          // Tạo ngày ISO (yyyy-mm-dd)
          const isoStartDate = `${startYear}-${formattedStartMonth}-${formattedStartDay}`;
          
          // Tạo input ẩn chứa giá trị ISO
          $('<input>').attr({
              type: 'hidden',
              name: 'startDate',
              value: isoStartDate
          }).appendTo(this);
      } else if(startDay || startMonth || startYear) {
          // Nếu chỉ nhập một phần của ngày, hiển thị lỗi
          e.preventDefault();
          alert('Vui lòng nhập đầy đủ ngày, tháng, năm cho ngày bắt đầu');
          return false;
      }
      
      // Xử lý chuyển đổi mã tỉnh/thành phố và quận/huyện thành tên để lưu vào database
      const provinceSelect = $('select[name="province"]');
      const districtSelect = $('select[name="district"]');
      
      if (provinceSelect.val()) {
          // Tạo input ẩn với tên tỉnh
          const provinceName = provinceSelect.find('option:selected').text();
          $('<input>').attr({
              type: 'hidden',
              name: 'provinceActual',
              value: provinceName
          }).appendTo(this);
      }
      
      if (districtSelect.val()) {
          // Tạo input ẩn với tên quận/huyện
          const districtName = districtSelect.find('option:selected').text();
          $('<input>').attr({
              type: 'hidden',
              name: 'districtActual',
              value: districtName
          }).appendTo(this);
      }
      
      if ($('select[name="birthplace"]').val()) {
          // Tạo input ẩn với tên nơi sinh
          const birthplaceName = $('select[name="birthplace"]').find('option:selected').text();
          $('<input>').attr({
              type: 'hidden',
              name: 'birthplaceActual',
              value: birthplaceName
          }).appendTo(this);
      }
      
      return true;
    });
    
    // Convert date inputs to DD/MM/YY format
    $('.date-input').each(function() {
      // Store the ISO format for form submission
      $(this).attr('data-iso-value', $(this).val());
      
      // Add change event to store ISO value when changed
      $(this).on('change', function() {
          $(this).attr('data-iso-value', $(this).val());
          
          // If there's a value, format it as DD/MM/YY for display
          if ($(this).val()) {
              var date = new Date($(this).val());
              var day = ("0" + date.getDate()).slice(-2);
              var month = ("0" + (date.getMonth() + 1)).slice(-2);
              var year = date.getFullYear().toString().substr(-2);
              
              // Format for display only
              var formattedDate = day + '/' + month + '/' + year;
              $(this).attr('data-formatted', formattedDate);
          }
      });
    });
    });
    </script>    
    <script>
        $(document).ready(function() {
        // Function to populate all employee data into the form
        function populateEmployeeForm(employee) {
          if (!employee) return;
        
          // Personal Information
          $('input[name="firstName"]').val(employee.name?.split(' ')[0] || '');
          $('input[name="lastName"]').val(employee.name?.split(' ').slice(1).join(' ') || '');
          $('input[name="birthName"]').val(employee.birthName || '');
          
          // Date of Birth - handle both Date object and ISO string
          if (employee.dateOfBirth) {
              const dob = employee.dateOfBirth instanceof Date ? 
                        employee.dateOfBirth : 
                        new Date(employee.dateOfBirth);
              $('select[name="dobDay"]').val(dob.getDate());
              $('select[name="dobMonth"]').val(dob.getMonth() + 1);
              $('select[name="dobYear"]').val(dob.getFullYear());
          }
          
          // Gender
          $(`input[name="gender"][value="${employee.gender || 'male'}"]`).prop('checked', true);
          
          // Contact Information
          $('input[name="email"]').val(employee.email || '');
          $('input[name="contactNumber"]').val(employee.contactNumber?.replace(/^\+84/, '') || '');
          
          // Address Information
          if (employee.province) {
              $('select[name="province"]').val(employee.province);
              $('select[name="district"]').val(employee.district || '');
              $('select[name="birthplace"]').val(employee.birthplace || '');
          }
          $('input[name="detailedAddress"]').val(employee.detailedAddress || '');
          
          // Identification
          $('input[name="idNumber"]').val(employee.idNumber || '');
          
          // Photo Preview
          if (employee.photo) {
              $('#preview-image').attr('src', employee.photo);
              $('#file-name-display').text('Current photo');
          }
          
          // Job Information
          $('select[name="designation"]').val(employee.designation || '');
          $('select[name="department"]').val(employee.department || '');
          $('input[name="jobId"]').val(employee.jobId || '');
          $('input[name="officeEmail"]').val(employee.officeEmail || '');
          $('input[name="supervisor"]').val(employee.supervisor || '');
          
          // Handle both employeeType and employmentType fields
          const employeeType = employee.employeeType || 
                             (employee.employmentType === 'full-time' ? 'Full-Time' : 'Part-Time');
          $('select[name="employeeType"]').val(employeeType || 'Full-Time');
          
          // Start Date
          if (employee.startDate) {
              const startDate = employee.startDate instanceof Date ? 
                               employee.startDate : 
                               new Date(employee.startDate);
              $('select[name="startDay"]').val(startDate.getDate());
              $('select[name="startMonth"]').val(startDate.getMonth() + 1);
              $('select[name="startYear"]').val(startDate.getFullYear());
          }
          
          // Experience Level
          $(`input[name="experience"][value="${employee.experience || 'Fresher'}"]`).prop('checked', true);
          
          // Skills - handle both Skills (capital S) and skills arrays
          const skills = employee.Skills || employee.skills || [];
          skills.forEach(skill => {
              $(`input[name="skills[]"][value="${skill}"]`).prop('checked', true);
          });
          
          // Trigger validation to clear any errors
          $('input, select').trigger('blur');
        }
        
        // Load employee data when page is ready
        const employeeData = <%- JSON.stringify(employee || {}) %>;
        populateEmployeeForm(employeeData);
        
        // Load address data - first pre-fill from employee data, then load API for editing
        function loadAddressData() {
        // First pre-fill existing values directly
        if (employeeData.province) {
          // Create temporary options with the employee data
          $('select[name="province"]').html(`<option value="${employeeData.province}" selected>${employeeData.province}</option>`);
          $('select[name="district"]').html(`<option value="${employeeData.district || ''}" selected>${employeeData.district || ''}</option>`);
          $('select[name="birthplace"]').html(`<option value="${employeeData.birthplace || ''}" selected>${employeeData.birthplace || ''}</option>`);
        }
        
        // Then load API data for editing
        if (window.provincesData) {
          populateProvinces(window.provincesData);
          return;
        }
        
        $.ajax({
          url: 'https://provinces.open-api.vn/api/?depth=2',
          type: 'GET',
          dataType: 'json',
          success: function(data) {
              window.provincesData = data;
              populateProvinces(data);
              
              // Re-apply employee data after API loads
              if (employeeData.province) {
                  $('select[name="province"]').val(employeeData.province);
                  $('select[name="district"]').val(employeeData.district || '');
                  $('select[name="birthplace"]').val(employeeData.birthplace || '');
              }
          },
          error: function() {
              console.error('Error loading address data');
              // Fallback to simple select if API fails
              $('select[name="province"]').removeAttr('disabled');
              $('select[name="district"]').removeAttr('disabled');
              $('select[name="birthplace"]').removeAttr('disabled');
          }
        });
        }
       // Hàm tải dữ liệu tỉnh/thành phố vào select box
function loadProvincesData(selector = 'select[name="province"]') {
  try {
    const provinceSelect = $(selector);
    if (!provinceSelect.length) {
      console.log(`Element not found: ${selector}`);
      return;
    }

    // Hiển thị loading...
    provinceSelect.prop('disabled', true);
    const firstOption = provinceSelect.find('option:first-child');
    provinceSelect.empty();
    provinceSelect.append(firstOption);
    
    // Sử dụng cache nếu có
    if (provincesCache) {
      populateProvinces(provinceSelect, provincesCache);
      return;
    }
    
    // Tải dữ liệu từ API proxy
    console.log('Đang tải dữ liệu tỉnh/thành phố từ API...');
    $.ajax({
      url: `${API_BASE_URL}/provinces`,
      type: 'GET',
      dataType: 'json',
      timeout: 5000,
      success: function(data) {
        console.log('Tải dữ liệu tỉnh/thành phố thành công');
        provincesCache = data;
        populateProvinces(provinceSelect, data);
      },
      error: function(xhr, status, error) {
        console.error("Không thể tải dữ liệu tỉnh/thành phố từ API:", error);
        console.log("Sử dụng dữ liệu dự phòng");
        provincesCache = backupProvincesData;
        populateProvinces(provinceSelect, backupProvincesData);
      }
    });
  } catch (error) {
    console.error(`Error loading provinces into ${selector}:`, error);
    const provinceSelect = $(selector);
    provinceSelect.prop('disabled', false);
    provincesCache = backupProvincesData;
    populateProvinces(provinceSelect, backupProvincesData);
  }
}
        function populateProvinces(data) {
          const $provinceSelect = $('select[name="province"]');
          $provinceSelect.empty().append('<option value="">Select province...</option>');
          
          // Sort provinces alphabetically
          data.sort((a, b) => a.name.localeCompare(b.name));
          
          data.forEach(province => {
              $provinceSelect.append(`<option value="${province.code}" data-name="${province.name}">${province.name}</option>`);
          });
        
          // Set current province if exists
          if (employeeData.province) {
              const provinceOption = $provinceSelect.find(`option[data-name="${employeeData.province}"]`);
              if (provinceOption.length) {
                  $provinceSelect.val(provinceOption.val()).trigger('change');
              }
          }
        }
        
        // District population when province changes
        $('select[name="province"]').on('change', function() {
          const $districtSelect = $('select[name="district"]');
          $districtSelect.empty().append('<option value="">Select district...</option>');
          
          if (!this.value) {
              $districtSelect.prop('disabled', true);
              return;
          }
        
          const provinceCode = this.value;
          const province = window.provincesData.find(p => p.code == provinceCode);
          
          if (province && province.districts) {
              // Sort districts alphabetically
              province.districts.sort((a, b) => a.name.localeCompare(b.name));
              
              province.districts.forEach(district => {
                  $districtSelect.append(`<option value="${district.name}">${district.name}</option>`);
              });
              
              $districtSelect.prop('disabled', false);
              
              // Set current district if exists
              if (employeeData.district) {
                  $districtSelect.val(employeeData.district);
              }
          }
        });
        // Xử lý tỉnh/thành và quận/huyện
        $(document).ready(function() {
            // Tải dữ liệu tỉnh/thành từ API
            loadProvincesData();
            
            // Set giá trị mặc định cho các trường
            const employeeData = <%- JSON.stringify(employee || {}) %>;
            
            // Set giá trị mặc định cho province/district nếu có
            if (employeeData.province) {
                setTimeout(() => {
                    $('select[name="province"]').val(employeeData.province).trigger('change');
                    setTimeout(() => {
                        if (employeeData.district) {
                            $('select[name="district"]').val(employeeData.district);
                        }
                    }, 500);
                }, 1000);
            }
            
            // Set giá trị mặc định cho birthplace
            if (employeeData.birthplace) {
                setTimeout(() => {
                    $('select[name="birthplace"]').val(employeeData.birthplace);
                }, 1000);
            }
            
            // Set giá trị mặc định cho photo
            if (employeeData.photo) {
                $('#preview-image').attr('src', employeeData.photo);
                $('#file-name-display').text('Current photo');
            } else {
                $('#preview-image').attr('src', '/images/default-avatar.png');
                $('#file-name-display').text('No file chosen');
            }
        });
        // Image preview
        $("#photo").change(function() {
        if (this.files && this.files[0]) {
        var reader = new FileReader();
        reader.onload = function(e) {
          $('#preview-image').attr('src', e.target.result);
        }
        reader.readAsDataURL(this.files[0]);
        $('#file-name-display').text(this.files[0].name);
        } else {
        // Reset về ảnh hiện tại nếu có
        $('#preview-image').attr('src', '<%= employee.photo || "https://via.placeholder.com/150" %>');
        $('#file-name-display').text('<%= employee.photo ? "Current photo" : "No file chosen" %>');
        }
        });
        
        // Hiển thị ảnh hiện tại khi trang load
        $(document).ready(function() {
        <% if (employee.photo) { %>
        $('#file-name-display').text('Current photo');
        <% } %>
        });
        // Initial load of address data
        loadAddressData();
        });
        </script>
        



<script>
  $(document).ready(function () {
    var initialFormData = {};
    var $form = $('#employee-form');
    var $saveButton = $('#saveButton');

    function getFormData() {
      var unindexed_array = $form.serializeArray();
      var indexed_array = {};

      $.map(unindexed_array, function (n, i) {
        indexed_array[n['name']] = n['value'];
      });

      // Handle unchecked checkboxes and radio buttons
      $form.find('input[type=checkbox]').each(function () {
        indexed_array[this.name] = this.checked;
      });
      $form.find('input[type=radio]').each(function () {
        if (this.checked) {
          indexed_array[this.name] = this.value;
        } else if (!indexed_array.hasOwnProperty(this.name)) {
          indexed_array[this.name] = null;
        }
      });

      // Handle file inputs by storing file name or empty string
      $form.find('input[type=file]').each(function () {
        indexed_array[this.name] = this.files.length > 0 ? this.files[0].name : $('#file-name-display').text().trim();
      });

      return indexed_array;
    }

    function isFormChanged(initialData, currentData) {
      for (var key in initialData) {
        if (initialData.hasOwnProperty(key)) {
          if (initialData[key] !== currentData[key]) {
            return true;
          }
        }
      }
      return false;
    }

    // Capture initial form data on page load
    initialFormData = getFormData();
    $saveButton.prop('disabled', true);

    // On any input/select/textarea change, check if form changed and enable/disable Save button
    $form.on('input change', 'input, select, textarea', function () {
      var currentFormData = getFormData();
      if (isFormChanged(initialFormData, currentFormData)) {
        $saveButton.prop('disabled', false);
      } else {
        $saveButton.prop('disabled', true);
      }
    });
  });
</script>
<script>
  $(document).ready(function () {
    var initialFormData = {};
    var $form = $('#employee-form');
    var $saveButton = $('#saveButton');

    function getFormData() {
      var unindexed_array = $form.serializeArray();
      var indexed_array = {};

      $.map(unindexed_array, function (n, i) {
        indexed_array[n['name']] = n['value'];
      });

      // Handle unchecked checkboxes and radio buttons
      $form.find('input[type=checkbox]').each(function () {
        indexed_array[this.name] = this.checked;
      });
      $form.find('input[type=radio]').each(function () {
        if (this.checked) {
          indexed_array[this.name] = this.value;
        } else if (!indexed_array.hasOwnProperty(this.name)) {
          indexed_array[this.name] = null;
        }
      });

      // Handle file inputs by storing file name or empty string
      $form.find('input[type=file]').each(function () {
        indexed_array[this.name] = this.files.length > 0 ? this.files[0].name : $('#file-name-display').text().trim();
      });

      return indexed_array;
    }

    function isFormChanged(initialData, currentData) {
      for (var key in initialData) {
        if (initialData.hasOwnProperty(key)) {
          if (initialData[key] !== currentData[key]) {
            return true;
          }
        }
      }
      return false;
    }

    // Capture initial form data on page load
    initialFormData = getFormData();
    $saveButton.prop('disabled', true);

    // On any input/select/textarea change, check if form changed and enable/disable Save button
    $form.on('input change', 'input, select, textarea', function () {
      var currentFormData = getFormData();
      if (isFormChanged(initialFormData, currentFormData)) {
        $saveButton.prop('disabled', false);
      } else {
        $saveButton.prop('disabled', true);
      }
    });
  });
</script>
</html>
